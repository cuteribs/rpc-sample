<#@ template hostspecific="true" language="C#" debug="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)RcpServer.Contracts\bin\Debug\netstandard2.0\RcpServer.Contracts.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="RpcServer" #>
<#@ import namespace="RpcServer.Contracts" #>
<#
	var contractType = typeof(IServiceContract);
	var services = contractType.Assembly.DefinedTypes.Where(t =>
		t.IsInterface
		&& t.ImplementedInterfaces.Contains(contractType)
	);
	
	var endpoints = services.Select(s => new
	{
		ServiceName = s.Name,
		Operations = s.GetMethods(BindingFlags.Public | BindingFlags.Instance)
			.Select(o => new
			{
				OperationName = o.Name,
				ParameterName = o.GetParameters().FirstOrDefault()?.ParameterType.Name
			})
	});
#>
using Microsoft.AspNetCore.Mvc;
using RpcServer.Contracts;

namespace RpcServer;

public static class WebApplicationExtensions
{
	public static WebApplication MapPostServiceContracts(this WebApplication app)
	{
<#
	foreach(var endpoint in endpoints)
	{
		foreach(var operation in endpoint.Operations)
		{
			var pattern = $"/{endpoint.ServiceName.TrimStart('I')}/{operation.OperationName}";
#>
		app.MapPost(
			"<#= pattern #>",
			(
<# 
			if (operation.ParameterName is null)
			{
#>
				[FromServices] <#= endpoint.ServiceName #> service
			) => service.<#= operation.OperationName #>()
<#			} else { #>
				[FromBody] <#= operation.ParameterName #> request,
				[FromServices] <#= endpoint.ServiceName #> service
			) => service.<#= operation.OperationName #>(request)

<#			} #>
		);

<#
		}
	}
#>
		return app;
	}
}